# -*- coding: utf-8 -*-
"""WebScraping_RNAV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/ecarracedo/form-contact/blob/master/WebScraping_RNAV.ipynb
"""

!pip install playwright
!pip install playwright nest_asyncio
!playwright install
!apt install -y libnss3

import asyncio  # Para ejecutar funciones as√≠ncronas
import csv  # Para guardar los datos como archivo CSV
import pandas as pd  # Para trabajar con DataFrames y exportar a Excel
import os  # Para manejar rutas de carpetas
from google.colab import drive  # Para montar Google Drive en Colab
from playwright.async_api import async_playwright, TimeoutError  # Playwright para scraping web

# Montar Google Drive en Colab
drive.mount('/content/drive')

async def scrapear_agencias_completo():
    provincia = input("üìç Ingres√° la provincia que quer√©s buscar: ").strip()  # Solicita la provincia al usuario

    async with async_playwright() as p:  # Inicia Playwright en contexto as√≠ncrono
        browser = await p.chromium.launch(headless=True)  # Lanza navegador Chromium sin interfaz gr√°fica
        context = await browser.new_context()  # Crea un contexto nuevo (como una pesta√±a)
        page = await context.new_page()  # Abre una p√°gina nueva

        try:
            print("üåê Cargando p√°gina...")
            await page.goto("https://www.agenciasdeviajes.ar/#buscador", timeout=30000)  # Abre la web con timeout de 30s

            print(f"‚å®Ô∏è Buscando '{provincia}'...")
            await page.wait_for_selector("input[placeholder*='Ciudad o Provincia']", timeout=20000)  # Espera el input
            await page.fill("input[placeholder*='Ciudad o Provincia']", provincia)  # Escribe la provincia
            await page.wait_for_timeout(2000)  # Espera 2 segundos por los resultados

            print("‚åõ Esperando resultados...")
            await page.wait_for_selector("h3.text-lg", timeout=20000)  # Espera a que aparezcan las agencias

            agencias = []  # Lista para guardar los datos
            pagina = 1  # Contador de p√°ginas

            while True:  # Loop para recorrer todas las p√°ginas
                print(f"üìÉ P√°gina {pagina}: extrayendo agencias...")

                h3_agencias = await page.query_selector_all("h3.text-lg")  # Encuentra los t√≠tulos de agencias
                for h3 in h3_agencias:
                    nombre = await h3.inner_text()  # Obtiene el nombre de la agencia
                    telefono = ""
                    correo = ""
                    localidad = ""

                    # Encuentra el contenedor padre con los detalles de contacto
                    contenedor = await h3.evaluate_handle("node => node.parentElement.parentElement")
                    contenedor_element = contenedor.as_element()

                    if contenedor_element:
                        # Busca los p√°rrafos donde est√°n tel√©fono, correo, localidad
                        parrafos = await contenedor_element.query_selector_all("p.leading-relaxed.text-sm")
                        for p in parrafos:
                            texto = await p.inner_text()
                            if "Tel√©fono:" in texto:
                                telefono = texto.replace("Tel√©fono:", "").strip()
                            if "Correo electr√≥nico:" in texto:
                                correo = texto.replace("Correo electr√≥nico:", "").strip()
                            if "Localidad:" in texto:
                                localidad = texto.replace("Localidad:", "").strip()

                    # Guarda los datos de la agencia
                    agencias.append({
                        "nombre": nombre,
                        "telefono": telefono,
                        "correo": correo,
                        "localidad": localidad,
                        "provincia": provincia
                    })

                # Cierra un modal si est√° abierto (como el de suscripci√≥n de video)
                print("üßπ Cerrando modal si est√° abierto...")
                await page.evaluate("""
                    () => {
                        const modal = document.querySelector('[role=dialog]');
                        if (modal) {
                            window.dispatchEvent(new CustomEvent('close-modal', { detail: { id: 'video1year' }}));
                        }
                    }
                """)
                await page.wait_for_timeout(1000)  # Espera un segundo luego de cerrar modal

                # Verifica si existe el bot√≥n de "Siguiente p√°gina"
                siguiente = page.locator("button[dusk='nextPage.after']")
                if await siguiente.count() == 0 or not await siguiente.is_enabled():
                    print("‚õî No hay m√°s p√°ginas.")
                    break  # Sale del loop si no hay m√°s p√°ginas

                try:
                    print("‚û°Ô∏è Haciendo clic en 'Siguiente'...")
                    await siguiente.scroll_into_view_if_needed()  # Asegura que el bot√≥n sea visible
                    await siguiente.click()  # Clic en bot√≥n de siguiente
                    await page.wait_for_timeout(2500)  # Espera a que cargue la nueva p√°gina
                    pagina += 1  # Incrementa el contador de p√°gina
                except Exception as e:
                    print(f"‚ö†Ô∏è Error al hacer clic en 'Siguiente': {e}")
                    break  # Sale del loop si ocurre un error

            await browser.close()  # Cierra el navegador

            # Crea carpeta destino en Drive si no existe
            drive_folder = "/content/drive/MyDrive/EC/WebScraping/RNAV/"
            os.makedirs(drive_folder, exist_ok=True)

            # Guarda los datos como CSV localmente en Colab
            csv_filename = f"{provincia.lower().replace(' ', '_')}_agencias_viaje.csv"
            print(f"üíæ Guardando en CSV: {csv_filename}")
            with open(csv_filename, "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=["nombre", "telefono", "correo", "localidad", "provincia"])
                writer.writeheader()
                writer.writerows(agencias)

            # Exporta los datos a Excel y los guarda en Google Drive
            df = pd.DataFrame(agencias)
            xlsx_path = os.path.join(drive_folder, f"{provincia.lower().replace(' ', '_')}_agencias_viaje.xlsx")
            df.to_excel(xlsx_path, index=False)
            print(f"‚úÖ Archivo Excel guardado en Google Drive: {xlsx_path}")
            print(f"üìÅ Total agencias: {len(agencias)}")

        # Manejo de errores
        except KeyboardInterrupt:
            print("‚ùå Ejecuci√≥n interrumpida por el usuario.")
        except TimeoutError as e:
            print(f"‚ùå Timeout alcanzado: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Ocurri√≥ un error inesperado: {e}")

# Ejecutar la funci√≥n
await scrapear_agencias_completo()