# -*- coding: utf-8 -*-
"""WebScraping_RNAV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/ecarracedo/form-contact/blob/master/WebScraping_RNAV.ipynb
"""

!pip install playwright
!pip install playwright nest_asyncio
!playwright install
!apt install -y libnss3

import asyncio
import csv
import pandas as pd
import os
import re
from google.colab import drive
from playwright.async_api import async_playwright, TimeoutError

# Montar Google Drive en Colab
drive.mount('/content/drive')

# Lista de provincias de Argentina
PROVINCIAS = [
    "Buenos Aires",
    "Catamarca",
    "Chaco",
    "Chubut",
    "C√≥rdoba",
    "Corrientes",
    "Entre R√≠os",
    "Formosa",
    "Jujuy",
    "La Pampa",
    "La Rioja",
    "Mendoza",
    "Misiones",
    "Neuqu√©n",
    "R√≠o Negro",
    "Salta",
    "San Juan",
    "San Luis",
    "Santa Cruz",
    "Santa Fe",
    "Santiago del Estero",
    "Tierra del Fuego",
    "Tucum√°n"
]

def normalizar_correo(correo):
    """Normaliza un correo electr√≥nico eliminando caracteres especiales."""
    if not correo:
        return ""
    # Elimina espacios en blanco
    correo = correo.strip()
    # Elimina caracteres especiales excepto @ y .
    correo = re.sub(r'[^a-zA-Z0-9@.]', '', correo)
    return correo.lower()

def mostrar_menu():
    print("\n=== MEN√ö DE PROVINCIAS ===")
    for i, provincia in enumerate(PROVINCIAS, 1):
        print(f"{i}. {provincia}")
    print("0. Salir")
    return input("\nSeleccione una provincia (n√∫mero): ")

async def scrapear_agencias_completo(provincia):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()

        try:
            print("üåê Cargando p√°gina...")
            await page.goto("https://www.agenciasdeviajes.ar/#buscador", timeout=30000)

            print(f"‚å®Ô∏è Buscando '{provincia}'...")
            await page.wait_for_selector("input[placeholder*='Ciudad o Provincia']", timeout=20000)
            await page.fill("input[placeholder*='Ciudad o Provincia']", provincia)
            await page.wait_for_timeout(2000)

            print("‚åõ Esperando resultados...")
            await page.wait_for_selector("h3.text-lg", timeout=20000)

            agencias = []
            pagina = 1

            while True:
                print(f"üìÉ P√°gina {pagina}: extrayendo agencias...")

                h3_agencias = await page.query_selector_all("h3.text-lg")
                for h3 in h3_agencias:
                    nombre = await h3.inner_text()
                    telefono = ""
                    correo = ""
                    localidad = ""

                    contenedor = await h3.evaluate_handle("node => node.parentElement.parentElement")
                    contenedor_element = contenedor.as_element()

                    if contenedor_element:
                        parrafos = await contenedor_element.query_selector_all("p.leading-relaxed.text-sm")
                        for p in parrafos:
                            texto = await p.inner_text()
                            if "Tel√©fono:" in texto:
                                telefono = texto.replace("Tel√©fono:", "").strip()
                            if "Correo electr√≥nico:" in texto:
                                correo = texto.replace("Correo electr√≥nico:", "").strip()
                                correo = normalizar_correo(correo)
                            if "Localidad:" in texto:
                                localidad = texto.replace("Localidad:", "").strip()

                    agencias.append({
                        "nombre": nombre,
                        "telefono": telefono,
                        "correo": correo,
                        "localidad": localidad,
                        "provincia": provincia
                    })

                print("üßπ Cerrando modal si est√° abierto...")
                await page.evaluate("""
                    () => {
                        const modal = document.querySelector('[role=dialog]');
                        if (modal) {
                            window.dispatchEvent(new CustomEvent('close-modal', { detail: { id: 'video1year' }}));
                        }
                    }
                """)
                await page.wait_for_timeout(1000)

                siguiente = page.locator("button[dusk='nextPage.after']")
                if await siguiente.count() == 0 or not await siguiente.is_enabled():
                    print("‚õî No hay m√°s p√°ginas.")
                    break

                try:
                    print("‚û°Ô∏è Haciendo clic en 'Siguiente'...")
                    await siguiente.scroll_into_view_if_needed()
                    await siguiente.click()
                    await page.wait_for_timeout(2500)
                    pagina += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è Error al hacer clic en 'Siguiente': {e}")
                    break

            await browser.close()

            # Guardar CSV local
            csv_filename = f"{provincia.lower().replace(' ', '_')}_agencias_viaje.csv"
            print(f"üíæ Guardando en CSV: {csv_filename}")
            with open(csv_filename, "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=["nombre", "telefono", "correo", "localidad", "provincia"])
                writer.writeheader()
                writer.writerows(agencias)

            # Guardar Excel en Drive
            df = pd.DataFrame(agencias)
            xlsx_path = f"/content/drive/MyDrive/EC/WebScraping/RNAV/{provincia.lower().replace(' ', '_')}_agencias_viaje.xlsx"
            df.to_excel(xlsx_path, index=False)
            print(f"‚úÖ Archivo Excel guardado en Google Drive: {xlsx_path}")
            print(f"üìÅ Total agencias: {len(agencias)}")

        except KeyboardInterrupt:
            print("‚ùå Ejecuci√≥n interrumpida por el usuario.")
        except TimeoutError as e:
            print(f"‚ùå Timeout alcanzado: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Ocurri√≥ un error inesperado: {e}")

async def main():
    while True:
        opcion = mostrar_menu()
        
        if opcion == "0":
            print("¬°Hasta luego!")
            break
            
        try:
            opcion = int(opcion)
            if 1 <= opcion <= len(PROVINCIAS):
                provincia = PROVINCIAS[opcion - 1]
                await scrapear_agencias_completo(provincia)
                
                continuar = input("\n¬øDesea buscar otra provincia? (s/n): ").lower()
                if continuar != 's':
                    print("¬°Hasta luego!")
                    break
            else:
                print("Opci√≥n inv√°lida. Por favor, seleccione un n√∫mero v√°lido.")
        except ValueError:
            print("Por favor, ingrese un n√∫mero v√°lido.")

if __name__ == "__main__":
    asyncio.run(main())